# Task 1
# Write your get_y() function here
def get_y(slope, intercept, x):
    """Calculate y from the equation y = slope * x + intercept"""
    y = slope * x + intercept
    return y

# Tasks 2 and 3
# Write your calculate_error() function here
def calculate_error(slope, intercept, point):
    """
    Calculate the error (vertical distance) between a point and the line 
    defined by the slope and intercept.
    """
    # Step 1: Get x and y values from the point
    x_point = point[0]  # x-coordinate of the point
    y_point = point[1]  # y-coordinate of the point
    
    # Step 2: Calculate the y value on the line using get_y()
    y_line = get_y(slope, intercept, x_point)
    
    # Step 3: Calculate the absolute difference (error)
    distance = abs(y_line - y_point)
    
    # Step 4: Return the error
    return distance

# Task 5
# Write your calculate_all_error() function here
def calculate_all_error(slope, intercept, points):
    """
    Calculate the total error across all points. This is the sum of 
    individual errors between each point and the line.
    """
    total_error = 0  # Initialize the total error to 0
    for point in points:
        total_error += calculate_error(slope, intercept, point)  # Accumulate errors for each point
    return total_error


# Tasks 8 and 9
# Generate the possible slope values from -10 to 10 inclusive, in increments of 0.1
possible_slopes = [slope * 0.1 for slope in range(-100, 101)]  # From -10 to 10 in 0.1 increments

# Generate the possible intercept values from -20 to 20 inclusive, in increments of 0.1
possible_intercepts = [intercept * 0.1 for intercept in range(-200, 201)]  # From -20 to 20 in 0.1 increments


# Task 10
datapoints = [(1, 2), (2, 0), (3, 4), (4, 4), (5, 3)]  # Dataset for the model


# Tasks 11 and 12

# Initialize variables to track the best line (smallest error)
smallest_error = float("inf")  # Start with the largest possible error
best_slope = 0  # Best slope (slope)
best_intercept = 0  # Best intercept (intercept)

# Task 13: Brute-force search through all possible combinations of slope and intercept
for slope in possible_slopes:
    for intercept in possible_intercepts:
        # Calculate the total error for the current line (slope, intercept)
        error = calculate_all_error(slope, intercept, datapoints)
        
        # If this error is smaller than the current smallest_error, update
        if error < smallest_error:
            best_slope = slope
            best_intercept = intercept
            smallest_error = error

# Print out the best slope, intercept, and the smallest error found
print("Best slope:", best_slope)
print("Best intercept:", best_intercept)
print("Smallest total error:", smallest_error)


# Task 14: Predict the bounce height for a ball with width 6 using the best-fit line
predicted_y = get_y(best_slope, best_intercept, 6)  # Predict y for x = 6

# Ensure the result is rounded to one decimal place for precision
predicted_y = round(predicted_y, 1)  # Round to 1 decimal place to match expected precision
print("Predicted bounce height for a 6cm ball:", predicted_y)  # Output the predicted height
